{"name":"Lotr-names-classification","tagline":"Machine learning used to classify the race of characters from Lord of the Rings","body":"# An approach to classify the races of characters from Lord of the Rings using their names as feature and naive Bayes\r\n\r\n## Overview\r\n***\r\nAs a huge fan of the Lord of the Rings and Tolkien's work, I was interested in finding a way of using data from the legendarium with machine learning. While searching and pondering about what problem could be interesting, I had the idea of playing around with the names of the characters and the relation to the race of said character.\r\n\r\nIn this report, I will discuss and show an approach used to predict the races of the characters from Lord of the Rings using a naive Bayes classifier and various techniques for natural language processing. The dataset used consists of 827 observations (characters) and their respective race.\r\n\r\n### Data fields\r\n- name: the name of the character\r\n- race: the race of the character. There are five possible races: Man, Ainur, Elf, Dwarf and Hobbit.\r\n\r\n### Tools used\r\n- Spark (Pyspark)\r\n- R: for scraping, transforming and preparing the data.\r\n\r\n## Scraping the data\r\nThe data used for the study was scraped from the website http://lotrproject.com/ (which is awesome). At the moment of writing, the homepage of the site features a family tree of all the characters from Tolkien's universe. Using Chrome's *View Page Source*, I copied the HTML code that is related to the characters to a new file.\r\n\r\nThen using R and the [rvest](https://cran.r-project.org/web/packages/rvest/rvest.pdf) web scraping library, I was able to scrap the wanted data. The next piece of show shows this.\r\n\r\n```r\r\nlibrary(rvest)\r\nhtml_data <- read_html(\"~/Development/lotr-names-classification/lotr-names-html.html\")\r\ncharacters_data <- data.frame(name = character(0), race = character(0),\r\n                              stringsAsFactors = FALSE)\r\n\r\nfor (i in 1:952){\r\n  \r\n  # Get the name\r\n  name <- html_data %>%\r\n    html_nodes(paste0('#', i)) %>%\r\n    html_text()\r\n  \r\n  race_and_class <- strsplit(html_data %>%\r\n    html_nodes(paste0('#', i)) %>%\r\n    html_attr('class'), split = ' ')\r\n  \r\n  if (length(name) > 0) {\r\n    characters_data[i,] <- list(name, race_and_class[[1]][length(race_and_class[[1]]) - 1])\r\n  }\r\n}\r\n```\r\nNow, we have the data in a dataframe. However, we are not done yet! As usual, the data is not in the right shape. Some of the observations has '?' as the character name, NA entries and trailing spaces. So, let's clean.\r\n\r\n```r\r\n# Remove rows with NA\r\ncharacters_data <- na.omit(characters_data)\r\n# Remove rows where name is '?'\r\ncharacters_data <- characters_data[grep('\\\\?', characters_data$name, invert = TRUE), ]\r\n# Remove \\n from the names\r\ncharacters_data$name <- sub('\\n', '', characters_data$name)\r\n# Remove the prefix '1st', '2nd', etc.\r\ncharacters_data$name <- sub('[0-9]?[0-9][a-z]{2}', '', characters_data$name)\r\n```\r\n\r\nIn the previous piece of code, we removed rows that contains NA, character names '?', and the prefix '1st', '2nd', etc that was present on some of the names. If you take a look at the linked website, you will see why the data has this.\r\n\r\nWhile cleaning the data, I removed those characters whose respective races does not appear often in the dataset because they would probably do more harm than good at the time of predicting since we do not have a large number of characters from that race.\r\n\r\n```r\r\n# Subset the races that have a significant number of entries\r\ncharacters_data <- characters_data[characters_data$race == 'Ainur' | \r\n                        characters_data$race == 'Dwarf' |\r\n                        characters_data$race == 'Elf' |\r\n                        characters_data$race == 'Half-elf' |\r\n                        characters_data$race == 'Hobbit' |\r\n                        characters_data$race == 'Man', ]\r\n# Change the half-elves for elves (sorry Elrond)\r\ncharacters_data$race[characters_data$race == 'Half-elf'] <- 'Elf'\r\n```\r\n\r\nIMAGE\r\n\r\nSo we kept, the ainur, dwarves, men, hobbits, elves and half-elves. These last two groups were marge into one, called elf. The race with the weird characters is 'Dunedain'\r\n\r\nLastly, the trailing spaces were removed, as well to some characters who do not have an actual name, but a title, e.g. Master of Lake-town, and the surnames, e.g. Frodo Baggins -> Frodo and Thorin III -> Thorin.\r\n\r\n```r\r\n# Remove trailing spaces\r\ncharacters_data$name <- sub('[ \\t]+$', '', characters_data$name)\r\n# Remove an entry where the name is 'Others'\r\ncharacters_data <- characters_data[characters_data$name != 'Others' & \r\n                                     characters_data$name != 'Master of La...', ]\r\n\r\n# The names of the characters on this dataframe won't have any surnames or\r\n# numbers on their name; we'll keep just the first name.\r\ncharacters_no_surnames <- characters_data\r\n\r\n# Regex to remove everything after the first whitespace\r\ncharacters_no_surnames$name <- sub(' .*', '', characters_no_surnames$name)\r\n```\r\n\r\nThen the data was exported to a text file. In addition to the dataset without surnames, I also included a second dataset with the full name of the character.\r\n\r\n```r\r\nwrite.csv(characters_no_surnames, file = 'characters_no_surnames.csv', row.names = FALSE)\r\nwrite.csv(characters_data, file = 'characters_data.csv', row.names = FALSE)\r\n```\r\n\r\n## Model development and prediction\r\n***\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}